#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CosineDist <- function(x,y){return(cosine_dist(as.numeric(x),as.numeric(y),testNA = FALSE))}
ChebyshevDist <- function(x,y){return(chebyshev(as.numeric(x),as.numeric(y),testNA = FALSE))}
EuclideanDist <- function(x,y){return(euclidean(as.numeric(x),as.numeric(y),testNA = FALSE))}
ManhattanDist <- function(x,y){return(manhattan(as.numeric(x),as.numeric(y),testNA = FALSE))}
distances.list = list(#Frechet = Frechet,
Coseno = CosineDist,
Chebyshev = ChebyshevDist,
Euclidean = EuclideanDist,
Manhattan = ManhattanDist)
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CosineDist <- function(x,y){return(cosine_dist(as.numeric(x),as.numeric(y),testNA = FALSE))}
ChebyshevDist <- function(x,y){return(chebyshev(as.numeric(x),as.numeric(y),testNA = FALSE))}
EuclideanDist <- function(x,y){return(euclidean(as.numeric(x),as.numeric(y),testNA = FALSE))}
ManhattanDist <- function(x,y){return(manhattan(as.numeric(x),as.numeric(y),testNA = FALSE))}
distances.list = list(#Frechet = Frechet,
#Coseno = CosineDist,
Chebyshev = ChebyshevDist,
Euclidean = EuclideanDist,
Manhattan = ManhattanDist)
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
print("series contaminadas")
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
View(df.result2)
dataset2 = names(df.list)[3]
sub1 = subset(df.result, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
dataset = names(df.list)[3]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
print("series contaminadas")
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(distances.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
dataset = names(df.list)[3]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
mahalanobis(S1.2, S2.2)
mahalanobis(S1.2, S2.2, cov(S1.2,S2.2))
sqrt(mahalanobis(S1.2, S2.2, cov(S1.2,S2.2)))
MahalanobisDist = function(S1,S2){
s = cov(S1,S2)
dif = S1-S2
dist2 = t(dif)%*%dif
return(dist2)
}
MahalanobisDist(S1.2,S2.2)
MahalanobisDist = function(S1,S2){
s = cov(S1,S2)
dif = S1-S2
dist2 = t(dif)%*%dif
return(sqrt(dist2))
}
MahalanobisDist(S1.2,S2.2)
Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CosineDist <- function(x,y){return(cosine_dist(as.numeric(x),as.numeric(y),testNA = FALSE))}
ChebyshevDist <- function(x,y){return(chebyshev(as.numeric(x),as.numeric(y),testNA = FALSE))}
EuclideanDist <- function(x,y){return(euclidean(as.numeric(x),as.numeric(y),testNA = FALSE))}
ManhattanDist <- function(x,y){return(manhattan(as.numeric(x),as.numeric(y),testNA = FALSE))}
distances.list = list(#Frechet = Frechet,
#Coseno = CosineDist,
Mahalanobis = MahalanobisDist,
Chebyshev = ChebyshevDist,
Euclidean = EuclideanDist,
Manhattan = ManhattanDist)
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
print("series contaminadas")
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(distances.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
dataset = names(df.list)[1]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
indices.list = list(Euclidea = EUC.DIST, #distancia euclidea [0,inf)
DTW = DTW.DIST, #dynamic time warping [0,inf)
SSIMT = SSIMT, #ssimt [-1,1]
CHOU = CHOU.DIST, #Chouarkia con distancia euclidea [0,inf)
Mahalanobis = MahalanobisDist)
noise.list = list(AmpScaling = AmpSca, #escalado de la amplitud
AmpShift = AmpShift, #desplazamiento de la amplitud
TimeSca = TimeSca, #escalado del tiempo
TimeShift = TimeShift, #desplazamiento del tiempo
GaussNoise = GaussNoise, #ruido aditivo gaussiano
SaltPepper = TS.SaltPepper) #sal y pimienta
grados = 10 #grados de contaminación
df.result = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = ts(S1[1:(sum(!is.na(S2)))])
S2.2 = ts(na.omit(S2))
for (i in 1:length(indices.list)) {
#Seleccionamos el índice
FUN = indices.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(indices.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result = rbind(df.result, dftoappend)
}
}
}
}
}
dataset = names(df.list)[1]
sub1 = subset(df.result, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
dataset = names(df.list)[2]
sub1 = subset(df.result, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
dataset = names(df.list)[3]
sub1 = subset(df.result, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CosineDist <- function(x,y){return(cosine_dist(as.numeric(x),as.numeric(y),testNA = FALSE))}
ChebyshevDist <- function(x,y){return(chebyshev(as.numeric(x),as.numeric(y),testNA = FALSE))}
EuclideanDist <- function(x,y){return(euclidean(as.numeric(x),as.numeric(y),testNA = FALSE))}
ManhattanDist <- function(x,y){return(manhattan(as.numeric(x),as.numeric(y),testNA = FALSE))}
distances.list = list(#Frechet = Frechet,
Coseno = CosineDist,
Mahalanobis = MahalanobisDist,
Chebyshev = ChebyshevDist,
Euclidean = EuclideanDist,
Manhattan = ManhattanDist)
grados = 10 #grados de contaminación
df.result2 = data.frame(stringsAsFactors=FALSE) #incializamos un dataframe para resultados
for (d in 1:length(df.list)) {
#Seleccionamos el dataset
DF = df.list[[d]]
for (s in 1:dim(DF)[1]) {
#Seleccionamos la serie a contaminar
S1 = ts(as.numeric(DF[s,]))
caso = paste0(d,".",s) #identificación del caso
for (n in 1:length(noise.list)) {
#seleccionamos la contaminación
NOISE = noise.list[[n]]
for (g in 1:grados) {
#contaminamos la serie
ifelse(names(noise.list[n])=="SaltPepper", gg <- (g*10/200), gg <- g)
S2 = NOISE(S1, gg)
S1.2 = as.matrix(S1[1:(sum(!is.na(S2)))])
S2.2 = as.matrix(na.omit(S2))
print("series contaminadas")
for (i in 1:length(distances.list)) {
#Seleccionamos el índice
FUN = distances.list[[i]]
#calculamos la similitud
sim = FUN(S1.2, S2.2)
print(paste(d,i))
#Identificamos y guuardamos
dftoappend = cbind(caso, #código de identificacipon: dataset.serie
names(df.list)[d], #dataset
names(noise.list)[n], #tipo de contaminación
g, #grado de contaminación
names(distances.list)[i], #índice utilizado
sim) #valor de similitud
colnames(dftoappend) = c("Caso", "Dataset", "Contaminación",
"Grado","Índice", "Similitud")
df.result2 = rbind(df.result2, dftoappend)
}
}
}
}
}
dataset = names(df.list)[1]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
dataset = names(df.list)[2]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
dataset = names(df.list)[3]
sub1 = subset(df.result2, Dataset==dataset)
ggplot(sub1, aes(x=as.numeric(Grado), y=as.numeric(Similitud), color=Caso))+
geom_line() +
facet_grid(Índice ~ Contaminación, scales="free")+
#facet_wrap(~Contaminación + Dataset)+
theme(legend.position = 'none')+
scale_x_continuous(breaks=seq(0,10,1))+
labs(title = dataset)
